/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ContactsService
{
    public interface Iface
    {
        List<Contact> getContacts();
#if SILVERLIGHT
    IAsyncResult Begin_getContacts(AsyncCallback callback, object state);
    List<Contact> End_getContacts(IAsyncResult asyncResult);
#endif
        List<Contact> addContacts(List<Contact> contacts);
#if SILVERLIGHT
    IAsyncResult Begin_addContacts(AsyncCallback callback, object state, List<Contact> contacts);
    List<Contact> End_addContacts(IAsyncResult asyncResult);
#endif
    }

    public class Client : IDisposable, Iface
    {
        public Client(TProtocol prot)
            : this(prot, prot)
        {
        }

        public Client(TProtocol iprot, TProtocol oprot)
        {
            iprot_ = iprot;
            oprot_ = oprot;
        }

        protected TProtocol iprot_;
        protected TProtocol oprot_;
        protected int seqid_;

        public TProtocol InputProtocol
        {
            get { return iprot_; }
        }
        public TProtocol OutputProtocol
        {
            get { return oprot_; }
        }


        #region " IDisposable Support "
        private bool _IsDisposed;

        // IDisposable
        public void Dispose()
        {
            Dispose(true);
        }


        protected virtual void Dispose(bool disposing)
        {
            if (!_IsDisposed)
            {
                if (disposing)
                {
                    if (iprot_ != null)
                    {
                        ((IDisposable)iprot_).Dispose();
                    }
                    if (oprot_ != null)
                    {
                        ((IDisposable)oprot_).Dispose();
                    }
                }
            }
            _IsDisposed = true;
        }
        #endregion



#if SILVERLIGHT
    public IAsyncResult Begin_getContacts(AsyncCallback callback, object state)
    {
      return send_getContacts(callback, state);
    }

    public List<Contact> End_getContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getContacts();
    }

#endif

        public List<Contact> getContacts()
        {
#if !SILVERLIGHT
            send_getContacts();
            return recv_getContacts();

#else
      var asyncResult = Begin_getContacts(null, null);
      return End_getContacts(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_getContacts(AsyncCallback callback, object state)
#else
        public void send_getContacts()
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("getContacts", TMessageType.Call, seqid_));
            getContacts_args args = new getContacts_args();
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public List<Contact> recv_getContacts()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            getContacts_result result = new getContacts_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContacts failed: unknown result");
        }


#if SILVERLIGHT
    public IAsyncResult Begin_addContacts(AsyncCallback callback, object state, List<Contact> contacts)
    {
      return send_addContacts(callback, state, contacts);
    }

    public List<Contact> End_addContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addContacts();
    }

#endif

        public List<Contact> addContacts(List<Contact> contacts)
        {
#if !SILVERLIGHT
            send_addContacts(contacts);
            return recv_addContacts();

#else
      var asyncResult = Begin_addContacts(null, null, contacts);
      return End_addContacts(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_addContacts(AsyncCallback callback, object state, List<Contact> contacts)
#else
        public void send_addContacts(List<Contact> contacts)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("addContacts", TMessageType.Call, seqid_));
            addContacts_args args = new addContacts_args();
            args.Contacts = contacts;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public List<Contact> recv_addContacts()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            addContacts_result result = new addContacts_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addContacts failed: unknown result");
        }

    }
    public class Processor : TProcessor
    {
        public Processor(Iface iface)
        {
            iface_ = iface;
            processMap_["getContacts"] = getContacts_Process;
            processMap_["addContacts"] = addContacts_Process;
        }

        protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
        private Iface iface_;
        protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

        public bool Process(TProtocol iprot, TProtocol oprot)
        {
            try
            {
                TMessage msg = iprot.ReadMessageBegin();
                ProcessFunction fn;
                processMap_.TryGetValue(msg.Name, out fn);
                if (fn == null)
                {
                    TProtocolUtil.Skip(iprot, TType.Struct);
                    iprot.ReadMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                    oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                    x.Write(oprot);
                    oprot.WriteMessageEnd();
                    oprot.Transport.Flush();
                    return true;
                }
                fn(msg.SeqID, iprot, oprot);
            }
            catch (IOException)
            {
                return false;
            }
            return true;
        }

        public void getContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            getContacts_args args = new getContacts_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            getContacts_result result = new getContacts_result();
            result.Success = iface_.getContacts();
            oprot.WriteMessageBegin(new TMessage("getContacts", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void addContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            addContacts_args args = new addContacts_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            addContacts_result result = new addContacts_result();
            result.Success = iface_.addContacts(args.Contacts);
            oprot.WriteMessageBegin(new TMessage("addContacts", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class getContacts_args : TBase
    {

        public getContacts_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("getContacts_args");
            oprot.WriteStructBegin(struc);
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("getContacts_args(");
            sb.Append(")");
            return sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class getContacts_result : TBase
    {
        private List<Contact> _success;

        public List<Contact> Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public getContacts_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 0:
                        if (field.Type == TType.List)
                        {
                            {
                                Success = new List<Contact>();
                                TList _list0 = iprot.ReadListBegin();
                                for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                {
                                    Contact _elem2 = new Contact();
                                    _elem2 = new Contact();
                                    _elem2.Read(iprot);
                                    Success.Add(_elem2);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("getContacts_result");
            oprot.WriteStructBegin(struc);
            TField field = new TField();

            if (this.__isset.success)
            {
                if (Success != null)
                {
                    field.Name = "Success";
                    field.Type = TType.List;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                        foreach (Contact _iter3 in Success)
                        {
                            _iter3.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("getContacts_result(");
            sb.Append("Success: ");
            sb.Append(Success);
            sb.Append(")");
            return sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class addContacts_args : TBase
    {
        private List<Contact> _contacts;

        public List<Contact> Contacts
        {
            get
            {
                return _contacts;
            }
            set
            {
                __isset.contacts = true;
                this._contacts = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool contacts;
        }

        public addContacts_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.List)
                        {
                            {
                                Contacts = new List<Contact>();
                                TList _list4 = iprot.ReadListBegin();
                                for (int _i5 = 0; _i5 < _list4.Count; ++_i5)
                                {
                                    Contact _elem6 = new Contact();
                                    _elem6 = new Contact();
                                    _elem6.Read(iprot);
                                    Contacts.Add(_elem6);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("addContacts_args");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Contacts != null && __isset.contacts)
            {
                field.Name = "contacts";
                field.Type = TType.List;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, Contacts.Count));
                    foreach (Contact _iter7 in Contacts)
                    {
                        _iter7.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("addContacts_args(");
            sb.Append("Contacts: ");
            sb.Append(Contacts);
            sb.Append(")");
            return sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class addContacts_result : TBase
    {
        private List<Contact> _success;

        public List<Contact> Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public addContacts_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 0:
                        if (field.Type == TType.List)
                        {
                            {
                                Success = new List<Contact>();
                                TList _list8 = iprot.ReadListBegin();
                                for (int _i9 = 0; _i9 < _list8.Count; ++_i9)
                                {
                                    Contact _elem10 = new Contact();
                                    _elem10 = new Contact();
                                    _elem10.Read(iprot);
                                    Success.Add(_elem10);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("addContacts_result");
            oprot.WriteStructBegin(struc);
            TField field = new TField();

            if (this.__isset.success)
            {
                if (Success != null)
                {
                    field.Name = "Success";
                    field.Type = TType.List;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                        foreach (Contact _iter11 in Success)
                        {
                            _iter11.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("addContacts_result(");
            sb.Append("Success: ");
            sb.Append(Success);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
